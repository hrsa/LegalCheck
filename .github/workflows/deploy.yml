name: Build and Deploy LegalCheck

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  VERSION: ${{ github.event.inputs.environment || 'production' }}-${{ github.sha }}

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Generate unique cache key
        id: cache-key
        run: echo "key=frontend-${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Checkout frontend repository
        uses: actions/checkout@v4
        with:
          repository: hrsa/LegalCheck_Frontend
          path: 'frontend'
          token: ${{ secrets.GH_FRONTEND_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Create frontend .env file
        run: |
          echo "APP_ENV=${{ github.event.inputs.environment || 'production' }}" > frontend/.env

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npx expo export --clear

      - name: Cache frontend build
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: ${{ steps.cache-key.outputs.key }}

  build-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    needs: build-frontend
    outputs:
      api-image: ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:${{ env.VERSION }}
      nginx-image: ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:${{ env.VERSION }}
      nginx-no-ssl-image: ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:${{ env.VERSION }}
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: 'backend'

      - name: Restore frontend build
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: ${{ needs.build-frontend.outputs.cache-key }}

      - name: Copy dist folder to backend
        run: |
          mkdir -p backend/dist
          cp -r frontend/dist/* backend/dist/

      - name: Create backend .env file
        run: |
          cd backend
          cat > .env << EOF
          APP_ENV=${{ secrets.APP_ENV }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          SENTRY_DSN_URL=${{ secrets.SENTRY_DSN_URL }}
          HOST=${{ secrets.HOST }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          INITIAL_ANALYSIS_PROMPT=${{ secrets.INITIAL_ANALYSIS_PROMPT }}
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Build and cache API image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/docker/api.dockerfile
          target: prod
          push: false
          load: true
          build-args: |
            UID=1001
            GID=1001
            USER=anton
          tags: ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:${{ env.VERSION }}
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:buildcache,mode=max

      - name: Start database for testing
        working-directory: backend
        run: |
          docker compose -f docker-compose-prod.yml up -d db
          echo "Waiting for database to be ready..."
          timeout=60
          until docker compose -f docker-compose-prod.yml exec -T db pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-legalcheck} || [ $timeout -le 0 ]
          do
            sleep 1
            ((timeout--))
            echo "Waiting for database... $timeout seconds left"
          done
          if [ $timeout -le 0 ]; then
            echo "Database failed to start in time"
            exit 1
          fi

      - name: Run API tests
        working-directory: backend
        run: |
          docker compose -f docker-compose-prod.yml run --rm api pytest -vv --cache-clear

      - name: Build and cache Nginx images
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/docker/nginx.dockerfile
          target: prod
          push: false
          load: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:${{ env.VERSION }}
          build-args: |
            UID=1001
            GID=1001
            USER=anton
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:buildcache,mode=max

      - name: Build and cache Nginx No-SSL image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/docker/nginx.dockerfile
          target: no-ssl
          push: false
          load: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:${{ env.VERSION }}
          build-args: |
            UID=1001
            GID=1001
            USER=anton
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:buildcache,mode=max

      - name: Push Docker images to registry
        run: |
          # Tag with version and latest
          docker tag ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:${{ env.VERSION }} ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:latest
          docker tag ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:${{ env.VERSION }} ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:latest
          docker tag ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:${{ env.VERSION }} ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:latest
          
          # Push all images
          docker push ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:${{ env.VERSION }}
          docker push ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:latest
          docker push ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:${{ env.VERSION }}
          docker push ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:latest
          docker push ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:${{ env.VERSION }}
          docker push ${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:latest

      - name: Clean up
        working-directory: backend
        run: docker compose -f docker-compose-prod.yml down

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-backend
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: 'backend'

      - name: Update docker-compose with version tags
        run: |
          cd backend
          sed -i "s|hrsa/legalcheck-api:production|${{ env.DOCKER_HUB_USERNAME }}/legalcheck-api:${{ env.VERSION }}|g" docker-compose-prod.yml
          sed -i "s|hrsa/legalcheck-nginx:production|${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx:${{ env.VERSION }}|g" docker-compose-prod.yml
          sed -i "s|hrsa/legalcheck-nginx-no-ssl:production|${{ env.DOCKER_HUB_USERNAME }}/legalcheck-nginx-no-ssl:${{ env.VERSION }}|g" docker-compose-prod.yml

      - name: Create backend .env file
        working-directory: backend
        run: |
          cat > .env << EOF
          APP_ENV=${{ secrets.APP_ENV }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          SENTRY_DSN_URL=${{ secrets.SENTRY_DSN_URL }}
          HOST=${{ secrets.HOST }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          INITIAL_ANALYSIS_PROMPT=${{ secrets.INITIAL_ANALYSIS_PROMPT }}
          EOF

      - name: Create an SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ env.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Copy docker-compose and .env files to the server
        working-directory: backend
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/var/www
          scp -o StrictHostKeyChecking=no docker-compose-prod.yml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/var/www

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            cd /var/www
            if [ -f docker-compose.yml ]; then
              cp docker-compose.yml docker-compose.yml.backup
            fi
            
            docker compose down
            mv docker-compose-prod.yml docker-compose.yml
            docker system prune -a -f
            docker compose pull
            docker compose run --rm certbot
            docker compose down
            docker compose up -d nginx
            
            echo "Waiting for application to be healthy..."
            timeout=120
            until curl -s -f http://${HOST:-localhost}/api/health > /dev/null || [ $timeout -le 0 ]
            do
              sleep 2
              ((timeout-=2))
              echo "Waiting for application... $timeout seconds left"
            done
            
            if [ $timeout -le 0 ]; then
              echo "Application failed to start in time, rolling back..."
              docker compose down
              mv docker-compose.yml.backup docker-compose.yml
              docker compose up -d
              exit 1
            else
              echo "Application is healthy!"
              find /var/www -name "docker-compose.yml.backup*" -type f -mtime +7 -delete
            fi